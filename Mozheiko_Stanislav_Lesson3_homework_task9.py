from random import randint


# Для удобства чтения кода решил написать функцию нахождения минимума в каждом столбце
def min_column(i, array):
    temp_list = [item[i]for item in array]
    temp_list.sort()
    return temp_list[0]


# Цикл для создания случайной матрицы
n = int(input('Введите количество строк матрицы: '))
m = int(input('Введите количество столбцов матрицы: '))
q = 1   # Разряд случайных чисел для заполнения матрицы
#   q = int(input('Введите разряд случайных чисел: '))
matrix = []
for row in range(n):
    row = [randint(1, 10 ** q - 1) for i in range(m)]     # Заполняю матрицу случайными от 1 ло 9
    # исключительно ради того,чтобы вывод был ровным и лучше читался. Для тестирования можно вписать любые
    # границы диапазона рандома
    matrix.append(row)
# Вывод матрицы в математическом виде
for item in matrix:
    print(item)
# Поиск минимальных значений столбцов
result_list = [min_column(i, matrix) for i in range(m)]
# Граница матрицы, для улучшения визуального восприятия
print('-' * m * 3)
# Вывод минимальных значений для каждого столбца, по условию не требуется, но так нагляднее
print(result_list)
result_list.sort()
print(f'Максимальный элемент среди минимумов столбцов матрицы: {result_list[-1]}')
